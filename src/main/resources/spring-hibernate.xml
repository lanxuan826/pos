<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop" xsi:schemaLocation="
http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
http://www.springframework.org/schema/tx 
http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
http://www.springframework.org/schema/aop 
http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
">

    <!-- JNDI(通过Tomcat)方式配置数据源 -->
    <!-- <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean"> <property name="jndiName" value="http://blog.csdn.net/xuxiao1991101/article/details/${jndiName}"></property> </bean> -->


    <!-- 配置数据源 -->
    <bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="url" value="http://blog.csdn.net/xuxiao1991101/article/details/${jdbc_url}" />
        <property name="username" value="http://blog.csdn.net/xuxiao1991101/article/details/${jdbc_username}" />
        <property name="password" value="http://blog.csdn.net/xuxiao1991101/article/details/${jdbc_password}" />

        <!-- 初始化连接大小 -->
        <property name="initialSize" value="http://blog.csdn.net/xuxiao1991101/article/details/0" />
        <!-- 连接池最大使用连接数量 -->
        <property name="maxActive" value="http://blog.csdn.net/xuxiao1991101/article/details/20" />
        <!-- 连接池最大空闲 -->
        <property name="maxIdle" value="http://blog.csdn.net/xuxiao1991101/article/details/20" />
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="http://blog.csdn.net/xuxiao1991101/article/details/0" />
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="http://blog.csdn.net/xuxiao1991101/article/details/60000" />

        <!-- <property name="poolPreparedStatements" value="http://blog.csdn.net/xuxiao1991101/article/details/true" /> <property name="maxPoolPreparedStatementPerConnectionSize" value="http://blog.csdn.net/xuxiao1991101/article/details/33" /> -->

        <property name="validationQuery" value="http://blog.csdn.net/xuxiao1991101/article/details/${validationQuery}" />
        <property name="testOnBorrow" value="http://blog.csdn.net/xuxiao1991101/article/details/false" />
        <property name="testOnReturn" value="http://blog.csdn.net/xuxiao1991101/article/details/false" />
        <property name="testWhileIdle" value="http://blog.csdn.net/xuxiao1991101/article/details/true" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="http://blog.csdn.net/xuxiao1991101/article/details/60000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="http://blog.csdn.net/xuxiao1991101/article/details/25200000" />

        <!-- 打开removeAbandoned功能 -->
        <property name="removeAbandoned" value="http://blog.csdn.net/xuxiao1991101/article/details/true" />
        <!-- 1800秒，也就是30分钟 -->
        <property name="removeAbandonedTimeout" value="http://blog.csdn.net/xuxiao1991101/article/details/1800" />
        <!-- 关闭abanded连接时输出错误日志 -->
        <property name="logAbandoned" value="http://blog.csdn.net/xuxiao1991101/article/details/true" />

        <!-- 监控数据库 -->
        <!-- <property name="filters" value="http://blog.csdn.net/xuxiao1991101/article/details/stat" /> -->
        <property name="filters" value="http://blog.csdn.net/xuxiao1991101/article/details/mergeStat" />
    </bean>

    <!-- 配置hibernate session工厂 -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
            </props>
        </property>

        <!-- 自动扫描注解方式配置的hibernate类文件 -->
        <property name="packagesToScan">
            <list>
                <value>com.xuxiao.model</value>
            </list>
        </property>
    </bean>

    <!-- 配置事务管理器 -->
    <bean name="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>

    <!-- 注解方式配置事物 -->
    <!-- <tx:annotation-driven transaction-manager="transactionManager" /> -->

    <!-- 拦截器方式配置事物 -->
    <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="add*" />
            <tx:method name="save*" />
            <tx:method name="update*" />
            <tx:method name="modify*" />
            <tx:method name="edit*" />
            <tx:method name="delete*" />
            <tx:method name="remove*" />
            <tx:method name="repair" />
            <tx:method name="deleteAndRepair" />
            <tx:method name="get*" propagation="SUPPORTS" />
            <tx:method name="find*" propagation="SUPPORTS" />
            <tx:method name="load*" propagation="SUPPORTS" />
            <tx:method name="search*" propagation="SUPPORTS" />
            <tx:method name="datagrid*" propagation="SUPPORTS" />
            <!-- 这里是针对我写的判断用户是否存在数据库的方法的事务，如果不配置的话就会出现no session异常 --> 
            <tx:method name="is*" />

            <tx:method name="*" propagation="SUPPORTS" />
        </tx:attributes>
    </tx:advice>
    <aop:config>
        <aop:pointcut id="transactionPointcut" expression="execution(* com.xuxiao.service..*Impl.*(..))" />
        <aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" />
    </aop:config>
</beans>